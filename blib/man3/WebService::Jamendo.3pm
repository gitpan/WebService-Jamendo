.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WebService::Jamendo 3pm"
.TH WebService::Jamendo 3pm "2009-06-28" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
WebService::Jamendo \- simple Perl API for jamendo.get2
.SH "VERSION"
.IX Header "VERSION"
This document refers to jamendo version 0.01
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WebService::Jamendo provides some methods for getting informations about Jamendo artist, albums, tracks etc.
It will return the data in the formats plain, \s-1JSON\s0 or \s-1JSON\s0 pretty.
.SH "NOTICE"
.IX Header "NOTICE"
I tried to get the best out of the jamendo.get2 \s-1API\s0 but some of the results just makes me wonder ;\-)
For the offical description of the jamendo.get2 \s-1API\s0 please visit http://developer.jamendo.com/de/wiki/Musiclist2Api
.SH "QUICK START"
.IX Header "QUICK START"
To get the \s-1JSON\s0 formatted data of a jamendo artist by his artist_id just follow these simply steps:
.PP
.Vb 2
\&        # Step 0
\&        use WebService::Jamendo;
.Ve
.PP
.Vb 2
\&        # Step 1
\&        my $jamendo = WebService::Jamendo\->new;
.Ve
.PP
.Vb 2
\&        # Step 2                                                                                
\&        my %hParams = (\(aqartist_id\(aq => \(aq22\(aq);
.Ve
.PP
.Vb 2
\&        # Step 3                                                        
\&        my $sArtistString = $jamendo\->getArtistInfos(\e%hParams);
.Ve
.PP
.Vb 2
\&        # Step 4                
\&        print "$sArtistString\en";
.Ve
.SH "JAMENDO METHODS"
.IX Header "JAMENDO METHODS"
In version 0.01 jamendo provides the following public methods
.PP
.Vb 14
\&        new()
\&        getAlbumInfos()
\&        getAlbumSearch()
\&        getAlbumTracks()
\&        getArtistInfos()
\&        getArtistSearch()
\&        getTrackInfos()
\&        getTrackSearch()
\&        getTrackStreamingFile()
\&        getUserAlbums()
\&        getUserFriends()
\&        getUserInfos()
\&        getUserSearch()
\&        getUserTracks()
.Ve
.PP
In version 0.01 jamendo provides the following private methods
.PP
.Vb 2
\&        __getDataSet()
\&        __getParams()
.Ve
.Sh "\fInew()\fP"
.IX Subsection "new()"
Create a new jamendo object
.PP
.Vb 2
\&        use WebService::Jamendo;
\&        my $jamendo = WebService::Jamendo\->new;
.Ve
.Sh "\fIgetAlbumInfos()\fP"
.IX Subsection "getAlbumInfos()"
Get informations for an album
.PP
This method returns:
.PP
.Vb 8
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
.Ve
.PP
foreach matching album.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 8
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
.Ve
.PP
Optional parameters may be:
.PP
.Vb 3
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # Return informations about the album with id = 50 in plain text (default is json)
\&        my %hParams = (\(aqalbum_id\(aq => \(aq50\(aq, \(aqformat\(aq => \(aqplain\(aq);
\&        my $sAlbumString = $jamendo\->getAlbumInfos(\e%hParams);
\&        print "$sAlbumString\en";
.Ve
.Sh "\fIgetAlbumSearch()\fP"
.IX Subsection "getAlbumSearch()"
Search for Albums
.PP
This method returns:
.PP
.Vb 8
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
.Ve
.PP
foreach found album.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 1
\&        searchquery
.Ve
.PP
Optional parameters may be:
.PP
.Vb 11
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # Return informations about 5 albums with love inside in jsonpretty format (default is json), order descending
\&        my %hParams = (\(aqsearchquery\(aq => \(aqlove\(aq, \(aqn\(aq => \(aq5\(aq, \(aqorder\(aq => \(aqdesc\(aq, \(aqformat\(aq => \(aqjsonpretty\(aq);
\&        my $sAlbumString = $jamendo\->getAlbumSearch(\e%hParams);
\&        print "$sAlbumSting\en";
.Ve
.Sh "\fIgetAlbumTracks()\fP"
.IX Subsection "getAlbumTracks()"
Get the tracks of an album
.PP
This method returns:
.PP
.Vb 13
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
.Ve
.PP
foreach track on the albums.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 13
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
.Ve
.PP
Optional parameters may be:
.PP
.Vb 3
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # Get informations about the tracks from the album with image url http://imgjam.com/albums/1114/covers/1.100.jpg in json pretty format (default is json)
\&        my %hParams = (\(aqalbum_image\(aq => \(aqhttp://imgjam.com/albums/1114/covers/1.100.jpg\(aq, \(aqformat\(aq => \(aqjsonpretty\(aq);
\&        my $sTrackString = jamendo\->getAlbumTracks(\e%hParams);
\&        print "$sTrackString\en";
.Ve
.Sh "\fIgetArtistInfos()\fP"
.IX Subsection "getArtistInfos()"
Get informations about artists
.PP
This method returns:
.PP
.Vb 8
\&        artist_id
\&        artist_name
\&        artist_url
\&        artist_image
\&        artist_mbgid
\&        location_country
\&        location_state
\&        location_city
.Ve
.PP
foreach matching artist.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 8
\&        artist_id
\&        artist_name
\&        artist_url
\&        artist_image
\&        artist_mbgid
\&        location_country
\&        location_state
\&        location_city
.Ve
.PP
Optional parameters may be:
.PP
.Vb 3
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # Get infos about artists living in Hamburg, Germany in JSON format
\&        my %hParams = (\(aqlocation_city\(aq => \(aqhamburg\(aq, \(aqlocation_country\(aq => \(aqDEU\(aq);
\&        my $sArtistString = $jamendo\->getArtistInfos(\e%hParams);
\&        print "$sArtistString\en";
.Ve
.Sh "\fIgetArtistSearch()\fP"
.IX Subsection "getArtistSearch()"
Search for artists
.PP
This method returns:
.PP
.Vb 8
\&        artist_id
\&        artist_name
\&        artist_url
\&        artist_image
\&        artist_mbgid
\&        location_country
\&        location_state
\&        location_city
.Ve
.PP
foreach found artist.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 1
\&        searchquery
.Ve
.PP
Optional parameters may be:
.PP
.Vb 12
\&        artist_id
\&        artist_id
\&        artist_name
\&        artist_url
\&        artist_image
\&        artist_mbgid
\&        location_country
\&        location_state
\&        location_city
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # Search for artists named felixaltona living in Hamburg
\&        my %hParams = (\(aqsearchquery\(aq => \(aqfelixaltona\(aq, \(aqlocation_state\(aq => \(aqHH\(aq);
\&        my $sArtistString = $jamendo\->getArtistSearch(\e%hParams);
\&        print "$sArtistString\en";
.Ve
.Sh "\fIgetTrackInfos()\fP"
.IX Subsection "getTrackInfos()"
Get information about tracks
.PP
This method returns:
.PP
.Vb 6
\&        album_id
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
.Ve
.PP
foreach matching track.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 6
\&        album_id
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
.Ve
.PP
Optional parameters may be:
.PP
.Vb 3
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # Get informations about all tracks from the album with id = 50
\&        my %hParams = (\(aqalbum_id\(aq => \(aq50\(aq);
\&        my $sTrackString = $jamendo\->getTrackInfos(\e%hParams);
\&        print "$sTrackString\en";
.Ve
.Sh "\fIgetTrackSearch()\fP"
.IX Subsection "getTrackSearch()"
Search for tracks
.PP
This method returns:
.PP
.Vb 6
\&        album_id
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
.Ve
.PP
foreach found track.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 1
\&        searchquery
.Ve
.PP
Optional parameters may be:
.PP
.Vb 9
\&        album_id
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # Search for tracks with love inside
\&        my %hParams = (\(aqsearchquery\(aq => \(aqlove\(aq);
\&        my $sTrackString = $jamendo\->getTrackSearch(\e%hParams);
\&        print "$sTrackString\en";
.Ve
.Sh "\fIgetTrackStreamingFile()\fP"
.IX Subsection "getTrackStreamingFile()"
This method returns the \s-1URL\s0 to the streaming media of tracks.
.PP
This method returns:
.PP
.Vb 1
\&        stream
.Ve
.PP
Default return format is plain.
Default return streamencoding is ogg2.
.PP
This method expects at least one of these parameters:
.PP
.Vb 3
\&        track_id
\&        track_name
\&        track_filename
.Ve
.PP
Optional parameters may be:
.PP
.Vb 4
\&        streamencoding
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # get the the streaming url for the track "Broken Hearts & Credit Cards" in 128k mp3 (default is ogg2)
\&        my %hParams = (\(aqtrack_name\(aq => \(aqBroken Hearts & Credit Cards\(aq, \(aqstreamencoding\(aq => \(aqmp31\(aq);
\&        my $sTrackURL = $jamendo\->getTrackStreamingFile(\e%hParams);
\&        print "$sTrackURL\en";
.Ve
.Sh "\fIgetUserAlbums()\fP"
.IX Subsection "getUserAlbums()"
Get the albums a user has starred
.PP
This method returns:
.PP
.Vb 10
\&        user_id
\&        user_idstr
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
.Ve
.PP
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 2
\&        user_id
\&        user_idstr
.Ve
.PP
Optional parameters may be:
.PP
.Vb 11
\&        artist_id
\&        album_id
\&        album_name
\&        album_url
\&        album_genre
\&        album_mbgid
\&        album_image
\&        album_duration
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # get the albums user sylvinus has starred
\&        my %hParams = (\(aquser_idstr\(aq => \(aqsylvinus\(aq);
\&        my $sAlbumString = $jamendo\->getUserAlbums(\e%hParams);
\&        print "$sAlbumString\en";
.Ve
.Sh "\fIgetUserFriends()\fP"
.IX Subsection "getUserFriends()"
Get the friends of a user (hopefully he got some)
Please notice that the user we search for here uses the user2_* fields, the user_* fields returning belong to his friends
.PP
This method returns:
.PP
.Vb 9
\&        user_id
\&        user_name
\&        user_idstr
\&        user_url
\&        user_image
\&        user_mbgid
\&        location_country
\&        location_state
\&        location_city
.Ve
.PP
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 2
\&        user2_id
\&        user2_idstr
.Ve
.PP
Optional parameters may be:
.PP
.Vb 11
\&        user_name
\&        user_idstr
\&        user_url
\&        user_image
\&        user_mbgid
\&        location_country
\&        location_state
\&        location_city
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # get all the friends of user sylvinus
\&        my %hParams = (\(aquser2_idstr\(aq => \(aqsylvinus\(aq);
\&        my $sFriendsString = $jamendo\->getUserFriends(\e%hParams);
\&        print "$sFriendsString\en";
.Ve
.Sh "\fIgetUserInfo()\fP"
.IX Subsection "getUserInfo()"
Get informations about users
.PP
This method returns:
.PP
.Vb 9
\&        user_id
\&        user_name
\&        user_idstr
\&        user_url
\&        user_image
\&        user_mbgid
\&        location_country
\&        location_state
\&        location_city
.Ve
.PP
foreach matching user.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 9
\&        user_id
\&        user_name
\&        user_idstr
\&        user_url
\&        user_image
\&        user_mbgid
\&        location_country
\&        location_state
\&        location_city
.Ve
.PP
Optional parameters may be:
.PP
.Vb 3
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # get informations about user in Hamburg, Germany in json pretty format (default is json)
\&        my %hParams = (\(aqlocation_city\(aq => \(aqhamburg\(aq, \(aqlocation_country\(aq => \(aqDEU\(aq, \(aqformat\(aq => \(aqjsonpretty\(aq);
\&        my $sUserString = $jamendo\->getUserInfos(\e%hParams);
\&        print "$sUserString\en";
.Ve
.Sh "\fIgetUserSearch()\fP"
.IX Subsection "getUserSearch()"
Search for user
.PP
This method returns:
.PP
.Vb 9
\&        user_id
\&        user_name
\&        user_idstr
\&        user_url
\&        user_image
\&        user_mbgid
\&        location_country
\&        location_state
\&        location_city
.Ve
.PP
foreach found user.
Default return format is json.
.PP
This method expects at least one of these parameters:
.PP
.Vb 1
\&        searchquery
.Ve
.PP
Optional parameters may be:
.PP
.Vb 12
\&        user_id
\&        user_name
\&        user_idstr
\&        user_url
\&        user_image
\&        user_mbgid
\&        location_country
\&        location_state
\&        location_city
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # search for the user sylvinus
\&        my %hParams = (\(aqsearchquery\(aq => \(aqsylvinus\(aq);
\&        my $sUserString = $jamendo\->getUserSearch(\e%hParams);
\&        print "$sUserString\en";
.Ve
.Sh "\fIgetUserTracks()\fP"
.IX Subsection "getUserTracks()"
Get the tracks a user has starred.
I dont know if this works, I didnt find a user who has starred tracks.
At least it doesnt return any error messages but this method may be useless.
.PP
This method should return:
.PP
.Vb 8
\&        user_id
\&        user_idstr
\&        album_id
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
.Ve
.PP
foreach track.
Default return format is json.
.PP
This method should expect at least one of these parameters:
.PP
.Vb 2
\&        user_id
\&        user_idstr
.Ve
.PP
Optional parameters may be:
.PP
.Vb 9
\&        album_id
\&        track_id
\&        track_name
\&        track_filename
\&        track_numalbum
\&        track_duration
\&        format
\&        n
\&        order
.Ve
.PP
Example:
.PP
.Vb 4
\&        # get the starred tracks of user sylvinus
\&        my %hParams = (\(aquser_idstr\(aq => \(aqsylvinus\(aq);
\&        my $sTrackString = $jamendo\->getUserTracks(\e%hParams);
\&        print "$sTrackString\en";
.Ve
.SH "BUGS"
.IX Header "BUGS"
If you find bugs please report me via email.
.SH "TODO"
.IX Header "TODO"
Tags, most rated etc.
If you have suggestions please tell me via email.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTTP::Request http://search.cpan.org/~gaas/libwww\-perl\-5.828/lib/HTTP/Request.pm
LWP::UserAgent http://search.cpan.org/~gaas/libwww\-perl\-5.828/lib/LWP/UserAgent.pm
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
Because this software is licensed free of charge, there is no warranty for the software, to the extent permitted by applicable law. Except when otherwise stated in writing the copyright holders and/or other parties provide the software \*(L"as is\*(R" without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. The entire risk as to the quality and performance of the software is with you. Should the software prove defective, you assume the cost of all necessary servicing, repair, or correction.
In no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who may modify and/or redistribute the software as permitted by the above licence, be liable to you for damages, including any general, special, incidental, or consequential damages arising out of the use or inability to use the software (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the software to operate with any other software), even if such holder or other party has been advised of the possibility of such damages.
.SH "AUTHOR"
.IX Header "AUTHOR"
Christoph Glaß christoph.glass@gmail.com
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009 by Christoph Glaß
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
